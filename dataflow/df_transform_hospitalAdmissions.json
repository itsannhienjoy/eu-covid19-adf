{
	"name": "df_transform_hpitalAdmissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_raw_ecdc_hospitalAdmissions",
						"type": "DatasetReference"
					},
					"name": "SourceHospitalAdmission"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_countryLookup",
						"type": "DatasetReference"
					},
					"name": "SourceLookupCountry"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_dimDate",
						"type": "DatasetReference"
					},
					"name": "SourceDateLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_processed_ecdc_hospitalAdmissionsWeekly",
						"type": "DatasetReference"
					},
					"name": "SinkHospitalAdmissionsWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_processed_ecdc_hospitalAmissionsDaily",
						"type": "DatasetReference"
					},
					"name": "SinkHospitalAdmissionsDaily"
				}
			],
			"transformations": [
				{
					"name": "LookupCountryCode"
				},
				{
					"name": "SelectRequiredFields"
				},
				{
					"name": "SlpitDailyFromWeekly"
				},
				{
					"name": "DeriveYearWeek"
				},
				{
					"name": "AggregateDate"
				},
				{
					"name": "JoinWithDate"
				},
				{
					"name": "PivotIndicator"
				},
				{
					"name": "SortWeekly"
				},
				{
					"name": "SelectForWeeklySink"
				},
				{
					"name": "PivotIndicatorDaily"
				},
				{
					"name": "SortDaily"
				},
				{
					"name": "SelectForDailySink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceHospitalAdmission",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceLookupCountry",
				"source(output(",
				"          date_key as string,",
				"          full_date_alternate_key as string,",
				"          year_num as integer,",
				"          year_quarter_num as string,",
				"          quarter_num as string,",
				"          quarter_txt as string,",
				"          year_month_num as string,",
				"          month_num as integer,",
				"          month_name as string,",
				"          month_short_name as string,",
				"          week_num_of_year as integer,",
				"          day_num_of_year as string,",
				"          day_num_of_quarter as string,",
				"          day_num_of_month as string,",
				"          day_num_of_week as string,",
				"          day_name as string,",
				"          day_short_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceDateLookup",
				"SourceHospitalAdmission, SourceLookupCountry lookup(SourceHospitalAdmission@country == SourceLookupCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountryCode",
				"LookupCountryCode select(mapColumn(",
				"          country = SourceHospitalAdmission@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          indicator,",
				"          value,",
				"          source,",
				"          reported_date = date,",
				"          reported_year_week = year_week",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredFields",
				"SelectRequiredFields split(indicator == \"Weekly new hospital admissions per 100k\" || indicator == \"Weekly new ICU admissions per 100k\",",
				"     disjoint: false) ~> SlpitDailyFromWeekly@(WeeklyData, DailyData)",
				"SourceDateLookup derive(iso_year_week = toString(iif(and(week_num_of_year == 1, month_num == 12), year_num + 1,",
				"iif(and(week_num_of_year >= 52, month_num == 1), year_num - 1,",
				"year_num))) + \"-W\" + lpad(toString(week_num_of_year),2,\"0\")) ~> DeriveYearWeek",
				"DeriveYearWeek aggregate(groupBy(iso_year_week),",
				"     week_start_date = min(full_date_alternate_key),",
				"          week_end_date = max(full_date_alternate_key)) ~> AggregateDate",
				"SlpitDailyFromWeekly@WeeklyData, AggregateDate join(reported_year_week == iso_year_week,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinWithDate",
				"JoinWithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          iso_year_week,",
				"          reported_year_week,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new ICU admissions per 100k', 'Weekly new hospital admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotIndicator",
				"PivotIndicator sort(asc(country, true),",
				"     desc(reported_year_week, true)) ~> SortWeekly",
				"SortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          reported_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          new_icu_admissions_count = {Weekly new ICU admissions per 100k_count},",
				"          new_hospital_admissions_count = {Weekly new hospital admissions per 100k_count},",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForWeeklySink",
				"SlpitDailyFromWeekly@DailyData pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          reported_year_week),",
				"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V_$N',",
				"     lateral: true) ~> PivotIndicatorDaily",
				"PivotIndicatorDaily sort(asc(country, true),",
				"     desc(reported_year_week, true)) ~> SortDaily",
				"SortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          reported_year_week,",
				"          icu_occupancy_count = {Daily ICU occupancy_count},",
				"          hospital_occupancy_count = {Daily hospital occupancy_count}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForDailySink",
				"SelectForWeeklySink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkHospitalAdmissionsWeekly",
				"SelectForDailySink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SinkHospitalAdmissionsDaily"
			]
		}
	}
}